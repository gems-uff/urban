<script src="https://maps.googleapis.com/maps/api/js?v=3.exp"></script>

<%- model_class = BusPosition -%>
<div class="page-header">
  <h1>Track Bus</h1>
</div>

<div class="col-md-12 row" style="margin-bottom: 30px">

  <form role="form" id="form">
    <div class="col-md-5">
      <div class="form-group">
        <label for="from_time" class="col-sm-2 control-label">From Time</label>
        <div class="col-sm-5">
          <input type="text" class="datepicker form-control" id="from_date" placeholder="Choose a date">
        </div>
        <div class="col-sm-5">
          <input type="text" class="form-control" id="from_hour" placeholder="Chose an hour">
        </div>
      </div>
    </div>
    <div class="col-md-5">
      <div class="form-group">
        <label for="bus_id" class="col-sm-2 control-label">Bus ID</label>

        <div class="col-sm-6">
          <input type="text" class="form-control" id="bus_id" placeholder="Enter Bus ID">
        </div>
      </div>
    </div>
    <div class="col-md-5">
      <div class="form-group">
        <label for="until_time" class="col-sm-2 control-label">Until Time</label>
        <div class="col-sm-5">
          <input type="text" class="datepicker form-control" id="until_date" placeholder="Choose a date">
        </div>
        <div class="col-sm-5">
          <input type="text" class="form-control" id="until_hour" placeholder="Chose an hour">
        </div>
      </div>
    </div>
    <input type="submit" id="form-submit" class="btn btn-primary btn-sm">
  </form>

</div>

<div class="row">
  <div id="map-canvas" style="height: 800px; width: 100%"></div>
</div>

<script src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer.js"></script>


<script>

    var map;
    var mc;
    var mcOptions = {
        gridSize: 50,
        maxZoom: 15
    };


    function initialize() {
        var mapOptions = {
            zoom: 11,
            center: new google.maps.LatLng(-22.9444308, -43.3841082),
            mapTypeControl: true,
            mapTypeControlOptions: {
                style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
            },
            navigationControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);

        mc = new MarkerClusterer(map, [], mcOptions);
        $('.datepicker').datepicker({ dateFormat: 'yy-mm-dd' });

    }
    var fp = []

    var flightPath = new google.maps.Polyline({
        path: fp,
        strokeColor: "#0000FF",
        strokeOpacity: 1.0,
        strokeWeight: 2
    });

    // Add a polyline to the map and push to the array.
    function addPolyline(lat, long) {
        var polyline = new google.maps.LatLng(lat, long);
        fp.push(polyline);
    }


    // Removes the fp from the map, but keeps them in the array.
    function clearPolylines() {
        flightPath.setMap(null)
    }

    // Shows any fp currently in the array.
    function showPolylines() {
        flightPath.setPath(fp);
        flightPath.setMap(map);
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < fp.length; i++) {
            bounds.extend(fp[i]);
        }
        map.fitBounds(bounds);
    }

    // Deletes all fp in the array by removing references to them.
    function deletePolylines() {
        clearPolylines();
        fp = [];
    }


    $(function () {
        var availableLines = <%= raw @lines.to_json %>;
        $("#line").autocomplete({
            source: availableLines,
            select: function (event, ui) {
                line = this.value
            }
        });


    });

    var line;
    var bus_id;

    $("#form").submit(function (e) {
        e.preventDefault();
        bus_id = $("#bus_id").val();
        from_time =$("#from_date").val() + " " + $("#from_hour").val();
        until_time = $("#until_date").val() + " " + $("#until_hour").val();

        alert("Vai chamar");
        $.get('<%=track_api_v1_track_buses_path%>', { bus_id: bus_id, from_time: from_time,
            until_time: until_time, format: 'json' })
                .done(function (data) {
                    positions = data.positions
                    alert("Entrou no done!");

                    deleteMarkers();
                    deletePolylines();

                    for (var i = 0; i < positions.length; i++) {
                        addPolyline(positions[i]["latitude"], positions[i]["longitude"]);
                        addBusMarker(new google.maps.LatLng(positions[i]['latitude'], positions[i]['longitude']), positions[i]['time']);
                    }

                    showPolylines();
                    showMarkers();

                    depart_time = null;
                    bus_id = null;
                });
    });


    var markers = []

    // Add a marker to the map and push to the array.
    function addMarker(location) {
        var marker = new google.maps.Marker({
            position: location,
            map: map,
            icon: new google.maps.MarkerImage('<%=asset_path 'bus_arrow.png'%>'),
            zIndex: Math.round(location.lat() * -100000) << 5
        });
        markers.push(marker);
    }

    function addBusMarker(location, info) {
        var infowindow = new google.maps.InfoWindow({
          content: info
        });
        var marker = new google.maps.Marker({
            position: location,
            map: map,
            zIndex: Math.round(location.lat() * -100000) << 5
        });
        marker.addListener('click', function() {
          infowindow.open(map, marker);
        });
        markers.push(marker);
    }

    // Sets the map on all markers in the array.
    function setAllMap(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }

    // Removes the markers from the map, but keeps them in the array.
    function clearMarkers() {
        setAllMap(null);
        mc.clearMarkers();

    }

    // Shows any markers currently in the array.
    function showMarkers() {

        setAllMap(map);
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < markers.length; i++) {
            bounds.extend(markers[i].position);
        }
        mc = new MarkerClusterer(map, markers, mcOptions);
        map.fitBounds(bounds);
    }

    // Deletes all markers in the array by removing references to them.
    function deleteMarkers() {
        clearMarkers();
        markers = [];
    }

    window.onload = initialize;


</script>
